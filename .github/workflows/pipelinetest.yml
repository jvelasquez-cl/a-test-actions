name: pipelinetest
on: push

env:
  USERNAME: ${{ github.actor }}
  BRANCH_NAME: ${{ github.ref }}

jobs:
  set-variables:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      deployment-api-url: ${{ steps.set-env.outputs.deployment-api-url }}
    steps:
      - name: Set env
        id: set-env
        run: |
          if [[ "${{github.base_ref}}" == "master" || "${{github.ref}}" == "refs/heads/master" ]]; then
            echo "::set-output name=environment::production"
            echo "::set-output name=deployment-api-url::https://ansible.evercheck.com/run-command"
          fi

          if [["${{github.ref}}" == "refs/heads/demo" ]]; then
            echo "::set-output name=environment::demo"
            echo "::set-output name=deployment-api-url::https://ansible.demo.evercheck.com/run-command"
          fi

          if [["${{github.ref}}" == "refs/heads/test" ]]; then
            echo "::set-output name=environment::test"
            echo "::set-output name=deployment-api-url::https://ansible.test.evercheck.com/run-command"
          fi

  # test:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - set-variables
  #   steps:
  # - name: test-request
  #   run: |
  #     API_RESPONSE=$(curl $flags $method $DEPLOYMENT_API --silent --header 'Content-Type: application/json' --data-raw '{ "service": "ecc-core-api", "command": "deploy", "location": "all", "username": "${{ env.USER_NAME }}" }')
  #     IFS=';' read -ra my_array <<< "$API_RESPONSE"
  #     API_RESPONSE_BODY="${my_array[0]}"
  #     API_RESPONSE_HTTP_CODE="${my_array[1]}"
  #     echo "::set-output name=response::$API_RESPONSE_BODY"
  #     echo "::set-output name=status::$API_RESPONSE_HTTP_CODE"
  # - name: env-step
  #   run: echo "${{ env.ENVIRONMENT }}"
  # - name: user-step
  #   run: echo "${{ github.actor }}"
  # - name: branch-step
  #   run: echo "${{ github.ref }}"
  # env:
  #   method: POST
  #   flags: -w ;%{http_code} --location --request
  #   ENVIRONMENT: ${{needs.set-variables.outputs.environment}}
  #   DEPLOYMENT_API: ${{needs.set-variables.outputs.deployment-api-url}}
  deploy:
    if: contains(github.event.head_commit.message, 'skip-deploy') != true
    runs-on: ubuntu-latest
    needs:
      - set-variables
    steps:
      - name: Schedule deployment
        run: echo "Runing deployment"

  test-next:
    needs:
      - deploy
    steps:
      - name: After deploy
        run: echo "Excecuted"
